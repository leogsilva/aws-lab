{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances."
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select a default VPC ID."
    },
    "SubnetID": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Select a default subnet ID in your selected VPC."
    },
    "DesiredCapacity": {
      "Type": "Number",
      "Default": "1",
      "Description": "Number of instances to launch in your ECS cluster."
    },
    "MaxSize": {
      "Type": "Number",
      "Default": "1",
      "Description": "Maximum number of instances that can be launched in your ECS cluster."
    },
    "JenkinsMaster": {
      "Type": "String",
      "Description": "Jenkins master address"
    },
    "JenkinsUsername": {
      "Type": "String",
      "Description": "username for jenkins swarm setup",
	  "Default": "admin"
    },
    "JenkinsPassword": {
      "Type": "String",
      "Description": "password for jenkins swarm setup",
	  "Default": "xPuWzxOyEj"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "Please choose a valid instance type."
    }
  },
  "Mappings": {
    "AWSRegionToAMI": {
      "ap-south-1": {
        "AMIID": "ami-ffa3da90"
      },
      "eu-west-2": {
        "AMIID": "ami-5c8e9838"
      },
      "eu-west-1": {
        "AMIID": "ami-03816c7a"
      },
      "ap-northeast-2": {
        "AMIID": "ami-3e15cb50"
      },
      "ap-northeast-1": {
        "AMIID": "ami-7f697318"
      },
      "sa-east-1": {
        "AMIID": "ami-4c146020"
      },
      "ca-central-1": {
        "AMIID": "ami-764cf312"
      },
      "ap-southeast-1": {
        "AMIID": "ami-724fd811"
      },
      "ap-southeast-2": {
        "AMIID": "ami-bc8895df"
      },
      "eu-central-1": {
        "AMIID": "ami-7de04212"
      },
      "us-east-1": {
        "AMIID": "ami-25ece233"
      },
      "us-east-2": {
        "AMIID": "ami-a9b293cc"
      },
      "us-west-1": {
        "AMIID": "ami-501b3530"
      },
      "us-west-2": {
        "AMIID": "ami-11f9e568"
      }
    }
  },
  "Resources": {
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Security Group",
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "EcsSecurityGroupHTTPinbound": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupRDPinbound": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "3389",
        "ToPort": "3389",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupALBports": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "31000",
        "ToPort": "61000",
        "SourceSecurityGroupId": {
          "Ref": "EcsSecurityGroup"
        }
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "CloudwatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              "ECSLogGroup",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "RetentionInDays": 14
      }
    },
    "ECSTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Name": "ECSTargetGroup",
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "ECSAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "SubnetID"
        },
        "LaunchConfigurationName": {
          "Ref": "ContainerInstances"
        },
        "MinSize": "1",
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        },
		"Tags": [
			{
				"Key": "scheduler:ec2-startstop",
				"Value": "1000;2000;utc;weekdays",
				"PropagateAtLaunch" : "true"
			}
		]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r ContainerInstances",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "100",
              "VolumeType": "gp2"
            }
          }
        ],
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell> \n",
                " # Set agent env variables for the Machine context (durable)\n",
                " [Environment]::SetEnvironmentVariable(\"ECS_CLUSTER\", \"",
                {
                  "Ref": "ECSCluster"
                },
                "\"",
                ", \"Machine\")",
                "\n",
                "echo \"{ `\"hosts`\": [`\"tcp:\/\/0.0.0.0:2375`\", `\"npipe:\/\/`\"] }\" | Out-File -FilePath c:\\ProgramData\\docker\\config\\daemon.json -Encoding Ascii;",
                "\n",
                "mkdir C:\\workspace-host;",
                "Get-Service docker | Restart-Service;",
                "Invoke-Command { netsh advfirewall firewall add rule name=\"docker engine\" dir=in action=allow protocol=TCP localport=2375 }",
                "\n",
                "$agentVersion = 'v1.14.3';",
                "$agentZipUri = \"https://s3.amazonaws.com/amazon-ecs-agent/ecs-agent-windows-$agentVersion.zip\";",
                "$agentZipMD5Uri = \"$agentZipUri.md5\";",
                "$ecsExeDir = \"$env:ProgramFiles\\Amazon\\ECS\";",
                "$zipFile = \"$env:TEMP\\ecs-agent.zip\";",
                "echo \"log\" >> c:\\windows\\temp\\log1.txt;",
                "echo $zipFile >> c:\\windows\\temp\\log1.txt;",
                "echo $ecsExeDir >> c:\\windows\\temp\\log1.txt;",
                "$md5File = \"$env:TEMP\\ecs-agent.zip.md5\";",
                "Invoke-RestMethod -OutFile $zipFile -Uri $agentZipUri;",
                "Invoke-RestMethod -OutFile $md5File -Uri $agentZipMD5Uri;",
                "$expectedMD5 = (Get-Content $md5File);",
                "$md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider;",
                "$actualMD5 = [System.BitConverter]::ToString($md5.ComputeHash([System.IO.File]::ReadAllBytes($zipFile))).replace(\"-\", \"\");",
                "if($expectedMD5 -ne $actualMD5) {",
                "echo \"Download does not match hash.\";",
                "echo \"Expected: $expectedMD5 - Got: $actualMD5\";",
                "exit 1;",
                "};",
                "Expand-Archive -Path $zipFile -DestinationPath $ecsExeDir -Force;",
                "$jobname = \"ECS-Agent-Init\";",
                "$script =  \"cd '$ecsExeDir'; .\\amazon-ecs-agent.ps1\";",
                "$repeat = (New-TimeSpan -Minutes 1);",
                "$jobpath = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\PowerShell\\ScheduledJobs\\$jobname\\ScheduledJobDefinition.xml\";",
                "if($(Test-Path -Path $jobpath)) {",
                "echo \"Job definition already present\";",
                "exit 0;",
                "}",
                "$scriptblock = [scriptblock]::Create(\"$script\");",
                "$trigger = New-JobTrigger -At (Get-Date).Date -RepeatIndefinitely -RepetitionInterval $repeat -Once;",
                "$options = New-ScheduledJobOption -RunElevated -ContinueIfGoingOnBattery -StartIfOnBattery;",
                "Register-ScheduledJob -Name $jobname -ScriptBlock $scriptblock -Trigger $trigger -ScheduledJobOption $options -RunNow;",
                "Add-JobTrigger -Name $jobname -Trigger (New-JobTrigger -AtStartup -RandomDelay 00:1:00);",
                "echo $scriptblock >> c:\\windows\\temp\\log1.txt;",
                "echo $trigger >> c:\\windows\\temp\\log1.txt;",
                "echo $options >> c:\\windows\\temp\\log1.txt;",
                "# end of script\n",
                " cfn-init.exe -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r ContainerInstances",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                " cfn-signal.exe -e $lastexitcode --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "   --resource ECSAutoScalingGroup ",
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                "; \n",
                " </powershell>\n",
                "<persist>true</persist>"
              ]
            ]
          }
        }
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "taskdefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
		"Volumes": [
			{
				"Host": {
					"SourcePath": "c:\\workspace-host"
				},
				"Name": "jenkins-workspace"
			}
		],
        "ContainerDefinitions": [
          {
            "Name": "jenkins-swarm",
            "Cpu": "100",
            "Essential": "true",
            "Image": "microsoft/windowsservercore",
            "Memory": "500",
            "EntryPoint": [
              "powershell",
              "-Command"
            ],
			"MountPoints": [
			   {
				  "SourceVolume": "jenkins-workspace",
				  "ContainerPath": "C:\\workspace-host"
			   }
			],
            "Command": [
				{
                "Fn::Join": [
                    "",
                    [
                      "powershell -NoProfile -ExecutionPolicy Bypass -Command \"$env:ChocolateyUseWindowsCompression='false'; iex ((New-Object System.Net.WebClient).DownloadString('https:\/\/chocolatey.org\/install.ps1'))\" ; SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" ; Invoke-WebRequest -Uri 'https:\/\/repo.jenkins-ci.org\/releases\/org\/jenkins-ci\/plugins\/swarm-client\/3.4\/swarm-client-3.4.jar' -OutFile 'C:\\swarm-client-3.4.jar'; C:\\ProgramData\\chocolatey\\bin\\choco install --version 8.0.141 -my jdk8; C:\\ProgramData\\chocolatey\\bin\\choco install git; C:\\ProgramData\\chocolatey\\bin\\choco install --version 17.06.0 -my docker; & \"C:\\Program Files\\Java\\jdk1.8.0_141\\bin\\java.exe\" -jar c:\\swarm-client-3.4.jar ",
					  " -master ",
                      {
                        "Ref": "JenkinsMaster"
                      },
                      " -username ",
                      {
                        "Ref": "JenkinsUsername"
                      },
					  " -password ",
					  {
						"Ref": "JenkinsPassword"
					  },
                      " -name win-slave -disableSslVerification -labels windows2016"
                    ]
                  ]
				}
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "jenkins-swarm-slave"
              }
            }
          }
        ]
      }
    },
    "service": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DesiredCount": "1",
        "TaskDefinition": {
          "Ref": "taskdefinition"
        }
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
					"ecs:CreateService",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
		  {
			 "PolicyName": "s3-full-access",
			 "PolicyDocument" : {
			  "Statement": [
				{
				  "Effect": "Allow",
				  "Action": "s3:*",
				  "Resource": "*"
				}
			  ]
			}
		  },
		  {
            "PolicyName": "ecs-client-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:RegisterTaskDefinition",
                    "ecs:ListTaskDefinitions",
                    "ecs:DescribeTaskDefinition",
					"ecr:GetAuthorizationToken"
                  ],
                  "Resource": "*"
                }
              ]
            }
		  }
        ]
      }
    },
    "AutoscalingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "application-autoscaling.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "service-autoscaling",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ecscluster": {
      "Value": {
        "Ref": "ECSCluster"
      }
    },
    "taskdef": {
      "Value": {
        "Ref": "taskdefinition"
      }
    }
  }
}
