{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "JenkinsMaster": {
      "Type": "String",
      "Description": "Jenkins master address"
    },
    "JenkinsUsername": {
      "Type": "String",
      "Description": "username for jenkins swarm setup",
	  "Default": "admin"
    },
    "JenkinsPassword": {
      "Type": "String",
      "Description": "password for jenkins swarm setup",
	  "Default": "xPuWzxOyEj"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances."
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select a default VPC ID."
    },
    "SubnetID": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Select a default subnet ID in your selected VPC."
    },
    "DesiredCapacity": {
      "Type": "Number",
      "Default": "1",
      "Description": "Number of instances to launch in your ECS cluster."
    },
    "MaxSize": {
      "Type": "Number",
      "Default": "1",
      "Description": "Maximum number of instances that can be launched in your ECS cluster."
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "Please choose a valid instance type."
    }
  },
  "Mappings": {
    "AWSRegionToAMI": {
      "ap-south-1": {
        "AMIID": "ami-bd2d6ed2"
      },
      "eu-west-2": {
        "AMIID": "ami-d5beacb1"
      },
      "eu-west-1": {
        "AMIID": "ami-bceb39c5"
      },
      "ap-northeast-2": {
        "AMIID": "ami-a8fa5fc6"
      },
      "ap-northeast-1": {
        "AMIID": "ami-ba2bf4dc"
      },
      "sa-east-1": {
        "AMIID": "ami-4d4d3321"
      },
      "ca-central-1": {
        "AMIID": "ami-1ce95178"
      },
      "ap-southeast-1": {
        "AMIID": "ami-df067dbc"
      },
      "ap-southeast-2": {
        "AMIID": "ami-76608214"
      },
      "eu-central-1": {
        "AMIID": "ami-ce7ac5a1"
      },
      "us-east-1": {
        "AMIID": "ami-5dbc7427"
      },
      "us-east-2": {
        "AMIID": "ami-4f705c2a"
      },
      "us-west-1": {
        "AMIID": "ami-ed45778d"
      },
      "us-west-2": {
        "AMIID": "ami-c231f7ba"
      }
    }
  },
  "Resources": {
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Security Group",
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "EcsSecurityGroupHTTPinbound": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupRDPinbound": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "3389",
        "ToPort": "3389",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupALBports": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "31000",
        "ToPort": "61000",
        "SourceSecurityGroupId": {
          "Ref": "EcsSecurityGroup"
        }
      }
    },
    "CloudwatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              "ECSLogGroup",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "RetentionInDays": 14
      }
    },
    "ECSAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "SubnetID"
        },
        "LaunchConfigurationName": {
          "Ref": "ContainerInstances"
        },
        "MinSize": "0",
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredCapacity"
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r ContainerInstances",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": "100",
              "VolumeType": "gp2"
            }
          }
        ],
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell> \n",
                " # Set agent env variables for the Machine context (durable)\n",
                "\n",
                "echo \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'));\" > c:\\jenkinsjob.ps1;",
                "echo \"refreshenv;\" >> c:\\jenkinsjob.ps1;",
                "echo \"choco install jdk8 -y -params 'installdir=c:\\\\java';\" >> c:\\jenkinsjob.ps1;",
                "echo \"choco install python -y; \" >> c:\\jenkinsjob.ps1;",
                "echo \"choco install svn -y;\" >> c:\\jenkinsjob.ps1;",
                "echo \"Invoke-WebRequest -Uri 'https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/3.4/swarm-client-3.4.jar' -OutFile 'C:\\swarm-client-3.4.jar';\" >> c:\\jenkinsjob.ps1;",
                "echo \"Invoke-WebRequest -Uri 'https://bootstrap.pypa.io/get-pip.py' -OutFile 'C:\\get-pip.py'\" >> c:\\jenkinsjob.ps1;",
                "echo \"c:\\java\\bin\\java -jar c:\\swarm-client-3.4.jar -master ",
                {
                  "Ref": "JenkinsMaster"
                },
                " -username ",
                {
                  "Ref": "JenkinsUsername"
                },
    					  " -password ",
    					  {
    						"Ref": "JenkinsPassword"
    					  },
                " -name win-slave -disableSslVerification -labels windows2016\" >> c:\\jenkinsjob.ps1;",
                "$jobname = \"Jenkins-Slave-Init\";",
                "$script =  \"C:\\jenkinsjob.ps1\";",
                "$repeat = (New-TimeSpan -Minutes 1);",
                "$jobpath = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\PowerShell\\ScheduledJobs\\$jobname\\ScheduledJobDefinition.xml\";",
                "$scriptblock = [scriptblock]::Create(\"$script\");",
                "$trigger = New-JobTrigger -At (Get-Date).Date -RepeatIndefinitely -RepetitionInterval $repeat -Once;",
                "$options = New-ScheduledJobOption -RunElevated -ContinueIfGoingOnBattery -StartIfOnBattery;",
                "Register-ScheduledJob -Name $jobname -ScriptBlock $scriptblock -Trigger $trigger -ScheduledJobOption $options -RunNow;",
                "Add-JobTrigger -Name $jobname -Trigger (New-JobTrigger -AtStartup -RandomDelay 00:5:00);",
                "echo $scriptblock >> c:\\windows\\temp\\log1jenkins.txt;",
                "echo $trigger >> c:\\windows\\temp\\log1jenkins.txt;",
                "echo $options >> c:\\windows\\temp\\log1jenkins.txt;",
                "# end of script\n",
                " cfn-init.exe -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r ContainerInstances",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                " cfn-signal.exe -e $lastexitcode --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "   --resource ECSAutoScalingGroup ",
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                "; \n",
                " </powershell>\n",
                "<persist>true</persist>"
              ]
            ]
          }
        }
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:UpdateContainerInstancesState",
                    "ecs:Submit*",
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "AutoscalingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "application-autoscaling.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "service-autoscaling",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    }
  },
  "Outputs": {

  }
}
